[{"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/index.js":"1","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/App.js":"2","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js":"3","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/requests.js":"4","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/axios.js":"5","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Banner.js":"6","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Navbar.js":"7"},{"size":222,"mtime":1643130146123,"results":"8","hashOfConfig":"9"},{"size":695,"mtime":1643475355092,"results":"10","hashOfConfig":"9"},{"size":2230,"mtime":1643477679315,"results":"11","hashOfConfig":"9"},{"size":712,"mtime":1643132875472,"results":"12","hashOfConfig":"9"},{"size":135,"mtime":1643134828087,"results":"13","hashOfConfig":"9"},{"size":1533,"mtime":1643478251502,"results":"14","hashOfConfig":"9"},{"size":825,"mtime":1643362369736,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1gr9o81",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/index.js",[],["33","34"],"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/App.js",[],"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js",["35"],"import React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            // https://developers.google.com/youtube/player_parameters\n            autoplay: 1,\n          },\n    }\n\n    const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\n    const[movies, setMovies] = useState([]);\n    const[trailerUrl, setTrailer] = useState(\"\");\n    \n\n    useEffect(() => {\n\n        //if [] spusti iba jediny raz\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            \n            return request;\n\n        }\n        fetchData();\n    },[fetchUrl]);\n\n \n\n    const handleClick = (x) => {\n        console.log(x);\n        if(trailerUrl) {\n            setTrailer(\"\");\n        } else {\n            \n            console.log(movieTrailer( null, { tmdbId: x} ));\n            movieTrailer( null, { tmdbId: x} )\n            \n            .then(url => {\n                console.log(url);\n                const urlParams =new URLSearchParams(new URL(url).search) ;\n                setTrailer(urlParams.get('v'))\n            })\n            .catch((error) =>console.log(error));\n        }\n\n    }\n\n    const handleClickFake = () => {\n        if(trailerUrl) {\n            setTrailer(\"\");\n        } else {\n            \n            setTrailer(\"fipVnRjUcyw\");\n        }\n\n    }\n    \n  return (\n  <div className='row' >\n      \n        <h2>{title}</h2>\n        <div className='row-posters'>\n            {movies.map(movie => (\n                <img \n                \n                key={movie.id}\n                onClick={() => handleClick(movie.id)}\n                className={`row-poster ${isLargeRow && \"row-poster-large\"}`}\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name} />\n                \n\n            ))}\n        </div>\n\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n  </div>\n  )\n}\n\nexport default Row;\n","/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/requests.js",[],"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/axios.js",[],"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Banner.js",[],"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Navbar.js",["36","37"],"import React, { useEffect, useState } from 'react';\n\nimport \"../styles/nav.css\";\nfunction Navbar() {\n\n    const [show,handleShow] = useState(false);\n\n    useEffect(() =>{\n        window.addEventListener(\"scroll\", () => {\n            if(window.scrollY > 1){\n                handleShow(true);\n            } else handleShow(false);\n        });\n\n            return ()=> {\n                window.removeEventListener(\"scroll\",window);\n            };\n\n    },[]);\n\n  return (\n  <div className={`nav ${show && \"nav-black-bg\"}`}>\n      <img \n      className='nav-logo'\n      src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/NewNetflixLogo.png\"\n      /> \n\n      <img\n      className='nav-avatar'\n      src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n\n      />\n  </div>\n  )\n}\n\nexport default Navbar;\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":58,"column":11,"nodeType":"44","messageId":"45","endLine":58,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":23,"column":7,"nodeType":"48","endLine":26,"endColumn":9},{"ruleId":"46","severity":1,"message":"47","line":28,"column":7,"nodeType":"48","endLine":32,"endColumn":9},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'handleClickFake' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]