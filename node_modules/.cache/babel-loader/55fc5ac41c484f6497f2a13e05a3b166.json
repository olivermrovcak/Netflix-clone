{"ast":null,"code":"var _jsxFileName = \"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    autoplay: 1\n  };\n  const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailer] = useState(\"\");\n  useEffect(() => {\n    //if [] spusti iba jediny raz\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailer(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URL(url).search;\n        setTrailer(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => {\n          handleClick(movie);\n        },\n        className: `row-poster ${isLargeRow && \"row-poster-large\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"trailerUrl\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Row, \"YM0uueD+RFWpXxC1n+EbJ5cUo3M=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js"],"names":["React","useEffect","useState","axios","YouTube","movieTrailer","Row","title","fetchUrl","isLargeRow","opts","height","width","autoplay","baseUrl","movies","setMovies","trailerUrl","setTrailer","fetchData","request","get","data","results","console","log","handleClick","movie","name","then","url","urlParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;;AACA,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAE1C,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,QAAQ,EAAC;AAHA,GAAb;AAOA,QAAMC,OAAO,GAAG,sCAAhB;AAEA,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAK,CAACe,UAAD,EAAaC,UAAb,IAA2BhB,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,mBAAekB,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUb,QAAV,CAAtB;AACAQ,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,aAAOA,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACZ,GAXQ,EAWP,CAACX,QAAD,CAXO,CAAT;AAaAgB,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;;AAEA,QAAMW,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGV,UAAH,EAAe;AACXC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAFD,MAEO;AACHb,MAAAA,YAAY,CAAC,CAAAsB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACMC,GAAG,IAAI;AACT,cAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQF,GAAR,EAAaG,MAA/B;AACAf,QAAAA,UAAU,CAACa,SAAS,CAACV,GAAV,CAAc,GAAd,CAAD,CAAV;AACH,OAJD,EAKCa,KALD,CAKQC,KAAD,IAAUX,OAAO,CAACC,GAAR,CAAYU,KAAZ,CALjB;AAMH;AAEJ,GAZD;;AAcF,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEM;AAAA,gBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA,YAFN,eAGM;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKQ,MAAM,CAACqB,GAAP,CAAWT,KAAK,iBACb;AACA,QAAA,OAAO,EAAE,MAAM;AAACD,UAAAA,WAAW,CAACC,KAAD,CAAX;AAAmB,SADnC;AAGA,QAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,kBAAmB,EAH1D;AAIA,QAAA,GAAG,EAAG,GAAEK,OAAQ,GAAEL,UAAU,GAAGkB,KAAK,CAACU,WAAT,GAAuBV,KAAK,CAACW,aAAc,EAJvE;AAKA,QAAA,GAAG,EAAEX,KAAK,CAACC;AALX,SAEKD,KAAK,CAACY,EAFX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHN,EAeOtB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAEP;AAApC;AAAA;AAAA;AAAA;AAAA,YAfrB;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAmBD;;GA9DQJ,G;;KAAAA,G;AAgET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        autoplay:1,\n\n    }\n\n    const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\n    const[movies, setMovies] = useState([]);\n    const[trailerUrl, setTrailer] = useState(\"\");\n\n    useEffect(() => {\n\n        //if [] spusti iba jediny raz\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            console.log(request);\n            return request;\n\n        }\n        fetchData();\n    },[fetchUrl]);\n\n    console.log(movies);\n\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailer(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\" )\n            .then(url => {\n                const urlParams = new URL(url).search;\n                setTrailer(urlParams.get('v'))\n            })\n            .catch((error) =>console.log(error));\n        }\n\n    }\n    \n  return (\n  <div className='row' >\n      \n        <h2>{title}</h2>\n        <div className='row-posters'>\n            {movies.map(movie => (\n                <img \n                onClick={() => {handleClick(movie)}}\n                key={movie.id}\n                className={`row-poster ${isLargeRow && \"row-poster-large\"}`}\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name} />\n\n            ))}\n        </div>\n\n        {trailerUrl && <YouTube videoId='trailerUrl' opts={opts} />}\n  </div>\n  )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}