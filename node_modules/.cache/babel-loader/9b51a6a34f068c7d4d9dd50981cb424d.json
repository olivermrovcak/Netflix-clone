{"ast":null,"code":"var _jsxFileName = \"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    autoplay: 1\n  };\n  const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    //if [] spusti iba jediny raz\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row-poster ${isLargeRow && \"row-poster-large\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"XtMThy8QKqU\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js"],"names":["React","useEffect","useState","axios","YouTube","Row","title","fetchUrl","isLargeRow","opts","height","width","autoplay","baseUrl","movies","setMovies","fetchData","request","get","data","results","console","log","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AACA,SAASC,GAAT,OAA8C;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAiC;AAE1C,QAAMC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,QAAQ,EAAC;AAHA,GAAb;AAOA,QAAMC,OAAO,GAAG,sCAAhB;AAEA,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAAnC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,mBAAee,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUX,QAAV,CAAtB;AACAQ,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,aAAOA,OAAP;AAEH;;AACDD,IAAAA,SAAS;AACZ,GAXQ,EAWP,CAACT,QAAD,CAXO,CAAT;AAaAc,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEF,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEM;AAAA,gBAAKR;AAAL;AAAA;AAAA;AAAA;AAAA,YAFN,eAGM;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKQ,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACb;AAEA,QAAA,SAAS,EAAG,cAAahB,UAAU,IAAI,kBAAmB,EAF1D;AAGA,QAAA,GAAG,EAAG,GAAEK,OAAQ,GAAEL,UAAU,GAAGgB,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAc,EAHvE;AAIA,QAAA,GAAG,EAAEF,KAAK,CAACG;AAJX,SACKH,KAAK,CAACI,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAHN,eAcM,QAAC,OAAD;AAAS,MAAA,OAAO,EAAC,aAAjB;AAA+B,MAAA,IAAI,EAAEnB;AAArC;AAAA;AAAA;AAAA;AAAA,YAdN;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAkBD;;GA9CQJ,G;;KAAAA,G;AAgDT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        autoplay:1,\n\n    }\n\n    const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\n    const[movies, setMovies] = useState([]);\n\n    useEffect(() => {\n\n        //if [] spusti iba jediny raz\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            console.log(request);\n            return request;\n\n        }\n        fetchData();\n    },[fetchUrl]);\n\n    console.log(movies);\n    \n  return (\n  <div className='row' >\n      \n        <h2>{title}</h2>\n        <div className='row-posters'>\n            {movies.map(movie => (\n                <img \n                key={movie.id}\n                className={`row-poster ${isLargeRow && \"row-poster-large\"}`}\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name} />\n\n            ))}\n        </div>\n\n        <YouTube videoId='XtMThy8QKqU' opts={opts} />\n  </div>\n  )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}