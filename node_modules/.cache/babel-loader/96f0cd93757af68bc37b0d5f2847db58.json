{"ast":null,"code":"var _jsxFileName = \"/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    autoplay: 1\n  };\n  const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailer] = useState(\"\");\n  const [idTMDB, setIdTMDB] = useState(\"\");\n  useEffect(() => {\n    //if [] spusti iba jediny raz\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailer(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.original_name) || \"\").then(url => {\n        console.log(url);\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailer(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  const handleById = () => {\n    if (idTMDB) {\n      setIdTMDB(\"\");\n    } else {\n      var _movie;\n\n      setIdTMDB((_movie = movie) === null || _movie === void 0 ? void 0 : _movie.id);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row-poster ${isLargeRow && \"row-poster-large\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: \"trailerUrl\",\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Row, \"BMmv2UUDsgFWQC1vmpHkG3dO3CQ=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/olivermrovcak/Desktop/REACT/netflix-clone/src/comps/Row.js"],"names":["React","useEffect","useState","axios","YouTube","movieTrailer","Row","title","fetchUrl","isLargeRow","opts","height","width","autoplay","baseUrl","movies","setMovies","trailerUrl","setTrailer","idTMDB","setIdTMDB","fetchData","request","get","data","results","console","log","handleClick","movie","name","original_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleById","id","map","poster_path","backdrop_path"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from '../axios';\nimport \"../styles/row.css\";\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        autoplay:1,\n\n    }\n\n    const baseUrl = \"https://image.tmdb.org/t/p/original/\";\n\n    const[movies, setMovies] = useState([]);\n    const[trailerUrl, setTrailer] = useState(\"\");\n    const[idTMDB, setIdTMDB] = useState(\"\");\n\n    useEffect(() => {\n\n        //if [] spusti iba jediny raz\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            console.log(request);\n            return request;\n\n        }\n        fetchData();\n    },[fetchUrl]);\n\n    console.log(movies);\n\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailer(\"\");\n        } else {\n            movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\" )\n            .then(url => {\n                console.log(url);\n                const urlParams =new URLSearchParams(new URL(url).search) ;\n                setTrailer(urlParams.get('v'))\n            })\n            .catch((error) =>console.log(error));\n        }\n\n    }\n\n    const handleById  = () => {\n        if(idTMDB) {\n            setIdTMDB(\"\");\n        } else {\n            setIdTMDB(movie?.id)\n\n        }\n\n    }\n    \n  return (\n  <div className='row' >\n      \n        <h2>{title}</h2>\n        <div className='row-posters'>\n            {movies.map(movie => (\n                <img \n                onClick={() => handleClick(movie)}\n                key={movie.id}\n                className={`row-poster ${isLargeRow && \"row-poster-large\"}`}\n                src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name} />\n\n            ))}\n        </div>\n\n        {trailerUrl && <YouTube videoId='trailerUrl' opts={opts} />}\n  </div>\n  )\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}